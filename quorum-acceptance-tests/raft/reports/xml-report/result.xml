<testsuites>
	<testsuite id="1" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_event.spec" time="11.451" timestamp="2018-12-01T15:40:33" name="Private smart contract with event" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Private smart contract with event" name="Log events in total are **only** captured in participated parties when executing the contract" time="5.735"></testcase>
		<testcase classname="Private smart contract with event" name="Log events in the state are **only** captured in participated parties when executing the contract" time="5.716"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="2" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_spam.spec" time="7.998" timestamp="2018-12-01T15:40:33" name="Multiple private smart contracts between nodes" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Multiple private smart contracts between nodes" name="Send transactions from one node to others" time="7.998"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="3" tests="2" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_private_transactions.spec" time="0.485" timestamp="2018-12-01T15:40:33" name="Value transfer in private transactions" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful private transaction submission" time="0.252"></testcase>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful signed private transaction submission" time="0.233">
			<failure message="Send some Wei from a default account in &#34;Node3&#34; to a default account in &#34;Node4&#34; in a signed private transaction&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;" type="Send some Wei from a default account in &#34;Node3&#34; to a default account in &#34;Node4&#34; in a signed private transaction&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;">com.quorum.gauge.services.TransactionService.lambda$sendSignedPrivateTransaction$10(TransactionService.java:158)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:69)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitScalar(OperatorMerge.java:395)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.tryEmit(OperatorMerge.java:355)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:846)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:248)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:148)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77)&#xA;rx.internal.operators.OperatorZip$Zip.tick(OperatorZip.java:252)&#xA;rx.internal.operators.OperatorZip$Zip$InnerSubscriber.onNext(OperatorZip.java:323)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.onNext(OperatorSubscribeOn.java:74)&#xA;rx.internal.producers.SingleProducer.request(SingleProducer.java:65)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber$1.request(OperatorSubscribeOn.java:109)&#xA;rx.Subscriber.setProducer(Subscriber.java:211)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.setProducer(OperatorSubscribeOn.java:105)&#xA;rx.internal.operators.OperatorSingle$ParentSubscriber.onCompleted(OperatorSingle.java:110)&#xA;rx.internal.operators.OperatorTake$1.onNext(OperatorTake.java:83)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitScalar(OperatorMerge.java:395)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.tryEmit(OperatorMerge.java:355)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:846)&#xA;rx.internal.operators.OnSubscribeFromIterable$IterableProducer.slowPath(OnSubscribeFromIterable.java:117)&#xA;rx.internal.operators.OnSubscribeFromIterable$IterableProducer.request(OnSubscribeFromIterable.java:89)&#xA;rx.Subscriber.setProducer(Subscriber.java:211)&#xA;rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:63)&#xA;rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:34)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:248)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:148)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)&#xA;rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.call(OperatorSubscribeOn.java:100)&#xA;rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1.call(CachedThreadScheduler.java:230)&#xA;rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)&#xA;java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)&#xA;java.util.concurrent.FutureTask.run(FutureTask.java:266)&#xA;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)&#xA;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)&#xA;java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&#xA;java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)&#xA;java.lang.Thread.run(Thread.java:748)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="4" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec" time="0.000" timestamp="2018-12-01T15:40:33" name="State manipulation in private smart contract" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="State manipulation in private smart contract" name="Private state is maintained" time="0.000">
			<skipped message="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec:27 Step implementation not found =&gt; &#39;Note: this step is not implemented indicating that the spec execution is temporarily skipped&#39;"></skipped>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="5" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/public_smart_contract_event.spec" time="1.291" timestamp="2018-12-01T15:40:33" name="Public smart contract with event" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Public smart contract with event" name="Log events in total are captured when executing the contract" time="1.291"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="6" tests="2" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_public_transactions.spec" time="0.951" timestamp="2018-12-01T15:40:33" name="Value transfer in public transactions" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Value transfer in public transactions" name="Successful public transaction submission" time="0.584"></testcase>
		<testcase classname="Value transfer in public transactions" name="Successful signed public transaction submission" time="0.367">
			<failure message="Send &#34;10&#34; Wei from a default account in &#34;Node3&#34; to a default account in &#34;Node4&#34; in a signed public transaction&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;" type="Send &#34;10&#34; Wei from a default account in &#34;Node3&#34; to a default account in &#34;Node4&#34; in a signed public transaction&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;">com.quorum.gauge.services.TransactionService.lambda$sendSignedPublicTransaction$5(TransactionService.java:108)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:69)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitScalar(OperatorMerge.java:395)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.tryEmit(OperatorMerge.java:355)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:846)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:248)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:148)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77)&#xA;rx.internal.operators.OperatorZip$Zip.tick(OperatorZip.java:252)&#xA;rx.internal.operators.OperatorZip$Zip$InnerSubscriber.onNext(OperatorZip.java:323)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.onNext(OperatorSubscribeOn.java:74)&#xA;rx.internal.producers.SingleProducer.request(SingleProducer.java:65)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber$1.request(OperatorSubscribeOn.java:109)&#xA;rx.Subscriber.setProducer(Subscriber.java:211)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.setProducer(OperatorSubscribeOn.java:105)&#xA;rx.internal.operators.OperatorSingle$ParentSubscriber.onCompleted(OperatorSingle.java:110)&#xA;rx.internal.operators.OperatorTake$1.onNext(OperatorTake.java:83)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitScalar(OperatorMerge.java:395)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.tryEmit(OperatorMerge.java:355)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:846)&#xA;rx.internal.operators.OnSubscribeFromIterable$IterableProducer.slowPath(OnSubscribeFromIterable.java:117)&#xA;rx.internal.operators.OnSubscribeFromIterable$IterableProducer.request(OnSubscribeFromIterable.java:89)&#xA;rx.Subscriber.setProducer(Subscriber.java:211)&#xA;rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:63)&#xA;rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:34)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:248)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:148)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)&#xA;rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.call(OperatorSubscribeOn.java:100)&#xA;rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1.call(CachedThreadScheduler.java:230)&#xA;rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)&#xA;java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)&#xA;java.util.concurrent.FutureTask.run(FutureTask.java:266)&#xA;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)&#xA;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)&#xA;java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&#xA;java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)&#xA;java.lang.Thread.run(Thread.java:748)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="7" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/transactions_for_block_height.spec" time="4.614" timestamp="2018-12-01T15:40:33" name="Transactions for different block heights" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Transactions for different block heights" name="Private smart contracts for Raft consensus" time="4.614"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="8" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_async.spec" time="3.251" timestamp="2018-12-01T15:40:33" name="Sending private smart contract asynchronously" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is successfully mined with valid account" time="2.026"></testcase>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is not mined with non-existed account" time="1.225"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="9" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_multiple.spec" time="18.088" timestamp="2018-12-01T15:40:33" name="Multiple private smart contracts" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Multiple private smart contracts" name="Contracts are mined" time="18.088"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="10" tests="5" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_single.spec" time="4.008" timestamp="2018-12-01T15:40:33" name="Single private smart contract" errors="0" hostname="travis-job-dbf8f06e-2164-43a5-8f79-33b98105e163">
		<properties></properties>
		<testcase classname="Single private smart contract" name="Contract is mined" time="0.349"></testcase>
		<testcase classname="Single private smart contract" name="Storage Root storing private smart contracts must be the same" time="0.198"></testcase>
		<testcase classname="Single private smart contract" name="Transaction payload is secured" time="0.476"></testcase>
		<testcase classname="Single private smart contract" name="Privacy is enforced between parties" time="2.445"></testcase>
		<testcase classname="Single private smart contract" name="When there&#39;s an update, privacy is still enforced" time="0.540"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
</testsuites>