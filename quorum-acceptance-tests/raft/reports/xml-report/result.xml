<testsuites>
	<testsuite id="1" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/private_transaction_bloom_section.spec" time="0.000" timestamp="2019-06-22T17:22:56" name="Private smart contract with event in the next bloom bit section" errors="0" skipped="1" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Private smart contract with event in the next bloom bit section" name="Log events are **only** captured in participated parties when executing the contract" time="0.000">
			<skipped message="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/private_transaction_bloom_section.spec:28 Step implementation not found =&gt; &#39;Note: this spec requires a revisit due to high block number setup&#39;"></skipped>
		</testcase>
		<system-out></system-out>
		<system-err>Validation failed, 1 Scenarios were skipped.</system-err>
	</testsuite>
	<testsuite id="2" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/transactions_for_block_height.spec" time="4.462" timestamp="2019-06-22T17:22:56" name="Transactions for different block heights" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Transactions for different block heights" name="Private smart contracts for Raft consensus" time="4.462"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="3" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec" time="0.000" timestamp="2019-06-22T17:22:56" name="State manipulation in private smart contract" errors="0" skipped="1" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="State manipulation in private smart contract" name="Private state is maintained" time="0.000">
			<skipped message="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec:27 Step implementation not found =&gt; &#39;Note: this step is not implemented indicating that the spec execution is temporarily skipped&#39;"></skipped>
		</testcase>
		<system-out></system-out>
		<system-err>Validation failed, 1 Scenarios were skipped.</system-err>
	</testsuite>
	<testsuite id="4" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/public_smart_contract_event.spec" time="2.933" timestamp="2019-06-22T17:22:56" name="Public smart contract with event" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Public smart contract with event" name="Log events in total are captured when executing the contract" time="2.933"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="5" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_multiple.spec" time="7.937" timestamp="2019-06-22T17:22:56" name="Multiple private smart contracts" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Multiple private smart contracts" name="Contracts are mined" time="7.937"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="6" tests="5" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_single.spec" time="2.019" timestamp="2019-06-22T17:22:56" name="Single private smart contract" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Single private smart contract" name="Contract is mined" time="0.356"></testcase>
		<testcase classname="Single private smart contract" name="Storage Root storing private smart contracts must be the same" time="0.203"></testcase>
		<testcase classname="Single private smart contract" name="Transaction payload is secured" time="0.495"></testcase>
		<testcase classname="Single private smart contract" name="Privacy is enforced between parties" time="0.421"></testcase>
		<testcase classname="Single private smart contract" name="When there&#39;s an update, privacy is still enforced" time="0.544"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="7" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/estimate_gas_private.spec" time="3.117" timestamp="2019-06-22T17:22:56" name="Estimate gas required for transactions and contracts" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create private smart contract" time="2.657"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a private smart contract" time="0.460"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="8" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_event.spec" time="6.636" timestamp="2019-06-22T17:22:56" name="Private smart contract with event" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Private smart contract with event" name="Log events in total are **only** captured in participated parties when executing the contract" time="3.112"></testcase>
		<testcase classname="Private smart contract with event" name="Log events in the state are **only** captured in participated parties when executing the contract" time="3.524"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="9" tests="4" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/smart_contract_dual_state.spec" time="19.531" timestamp="2019-06-22T17:22:56" name="Dual state implementation when peforming function calls from one smart contract to another" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all public smart contracts: public -&gt; public -&gt; public" time="5.320"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all private smart contracts: private -&gt; private -&gt; private" time="3.446"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a private smart contract to public smart contracts: private -&gt; public -&gt; public" time="5.400"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a public smart contract to private smart contracts: public -&gt; private -&gt; private" time="5.365"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="10" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_private_transactions.spec" time="0.568" timestamp="2019-06-22T17:22:56" name="Value transfer in private transactions" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful private transaction submission" time="0.214"></testcase>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful signed private transaction submission" time="0.354"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="11" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_async.spec" time="2.537" timestamp="2019-06-22T17:22:56" name="Sending private smart contract asynchronously" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is successfully mined with valid account" time="1.465"></testcase>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is not mined with non-existed account" time="1.072"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="12" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_spam.spec" time="8.421" timestamp="2019-06-22T17:22:56" name="Multiple private smart contracts between nodes" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Multiple private smart contracts between nodes" name="Send transactions from one node to others" time="8.421"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="13" tests="3" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_public_raw_smart_contract_single.spec" time="3.735" timestamp="2019-06-22T17:22:56" name="Public raw smart contract when signed externally" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Public raw smart contract when signed externally" name="Contract is deployed and mined" time="1.571"></testcase>
		<testcase classname="Public raw smart contract when signed externally" name="Everyone in the network has the same state for the contract" time="0.325"></testcase>
		<testcase classname="Public raw smart contract when signed externally" name="When there&#39;s an update, every node is updated" time="1.839"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="14" tests="3" failures="3" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/raft_gas_usage.spec" time="131.502" timestamp="2019-06-22T17:22:56" name="Gas usage for private contracts on participant and non-participant nodes" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Gas usage for private contracts on participant and non-participant nodes" name="Private contract with gas below intrinsic gas should be rejected (and not remain pending)." time="131.011">
			<failure message="Private transaction where minter is a participant and gas value is &#34;25100&#34;, name this contract as &#34;contract1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.net.SocketException: Malformed reply from SOCKS server&#39;" type="Private transaction where minter is a participant and gas value is &#34;25100&#34;, name this contract as &#34;contract1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.net.SocketException: Malformed reply from SOCKS server&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.services.RaftService.getLeader(RaftService.java:87)&#xA;com.quorum.gauge.RaftGasUsage.sendPrivateTransactionWithParticipantMinter(RaftGasUsage.java:61)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Gas usage for private contracts on participant and non-participant nodes" name="Private contract with gas between intrinsic gas and required gas should be rejected (and not remain pending)." time="0.372">
			<failure message="Private transaction where minter is a participant and gas value is &#34;60352&#34;, name this contract as &#34;contract3&#34;&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;" type="Private transaction where minter is a participant and gas value is &#34;60352&#34;, name this contract as &#34;contract3&#34;&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;">java.base/java.lang.String.contains(String.java:2036)&#xA;com.quorum.gauge.services.RaftService.getLeader(RaftService.java:90)&#xA;com.quorum.gauge.RaftGasUsage.sendPrivateTransactionWithParticipantMinter(RaftGasUsage.java:61)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Gas usage for private contracts on participant and non-participant nodes" name="Private contract with sufficient gas should be accepted." time="0.119">
			<failure message="Private transaction where minter is a participant and gas value is &#34;120000&#34;, name this contract as &#34;contract5&#34;&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;" type="Private transaction where minter is a participant and gas value is &#34;120000&#34;, name this contract as &#34;contract5&#34;&#xA;Step Execution Failure: &#39;java.lang.NullPointerException&#39;">java.base/java.lang.String.contains(String.java:2036)&#xA;com.quorum.gauge.services.RaftService.getLeader(RaftService.java:90)&#xA;com.quorum.gauge.RaftGasUsage.sendPrivateTransactionWithParticipantMinter(RaftGasUsage.java:61)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="15" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_public_transactions.spec" time="5.254" timestamp="2019-06-22T17:22:56" name="Value transfer in public transactions" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Value transfer in public transactions" name="Successful public transaction submission" time="2.612"></testcase>
		<testcase classname="Value transfer in public transactions" name="Successful signed public transaction submission" time="2.642"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="16" tests="3" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/estimate_gas.spec" time="1.374" timestamp="2019-06-22T17:22:56" name="Estimate gas required for transactions and contracts" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required for public transaction" time="0.772"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create public smart contract" time="0.299"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a public smart contract" time="0.303"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="17" tests="5" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_private_raw_smart_contract_single.spec" time="13.516" timestamp="2019-06-22T17:22:56" name="Private raw smart contract when signed externally" errors="0" hostname="travis-job-c47c8762-8456-4ce4-87bd-f5ca2ed1d0d3">
		<properties></properties>
		<testcase classname="Private raw smart contract when signed externally" name="Contract is mined" time="4.490"></testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Storage Root storing private smart contracts must be the same" time="1.741"></testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Transaction payload is secured" time="1.941"></testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Privacy is enforced between parties" time="1.869"></testcase>
		<testcase classname="Private raw smart contract when signed externally" name="When there&#39;s an update, privacy is still enforced" time="3.475"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
</testsuites>