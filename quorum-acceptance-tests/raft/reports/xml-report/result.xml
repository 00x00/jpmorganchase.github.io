<testsuites>
	<testsuite id="1" tests="5" failures="5" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_private_raw_smart_contract_single.spec" time="7.542" timestamp="2019-01-07T16:02:26" name="Single private smart contract when signed externally" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Single private smart contract when signed externally" name="Contract is mined" time="1.647">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract when signed externally" name="Storage Root storing private smart contracts must be the same" time="1.609">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract when signed externally" name="Transaction payload is secured" time="1.337">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract when signed externally" name="Privacy is enforced between parties" time="1.551">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract when signed externally" name="When there&#39;s an update, privacy is still enforced" time="1.398">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node7&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: java.lang.IllegalArgumentException: unexpected url: null/storeraw&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="2" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec" time="0.000" timestamp="2019-01-07T16:02:26" name="State manipulation in private smart contract" errors="0" skipped="1" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="State manipulation in private smart contract" name="Private state is maintained" time="0.000">
			<skipped message="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec:27 Step implementation not found =&gt; &#39;Note: this step is not implemented indicating that the spec execution is temporarily skipped&#39;"></skipped>
		</testcase>
		<system-out></system-out>
		<system-err>Validation failed, 1 Scenarios were skipped.</system-err>
	</testsuite>
	<testsuite id="3" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_public_transactions.spec" time="1.160" timestamp="2019-01-07T16:02:26" name="Value transfer in public transactions" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Value transfer in public transactions" name="Successful public transaction submission" time="0.560"></testcase>
		<testcase classname="Value transfer in public transactions" name="Successful signed public transaction submission" time="0.600"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="4" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/public_smart_contract_event.spec" time="1.326" timestamp="2019-01-07T16:02:26" name="Public smart contract with event" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Public smart contract with event" name="Log events in total are captured when executing the contract" time="1.326"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="5" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_private_transactions.spec" time="0.540" timestamp="2019-01-07T16:02:26" name="Value transfer in private transactions" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful private transaction submission" time="0.236"></testcase>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful signed private transaction submission" time="0.304"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="6" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_async.spec" time="2.577" timestamp="2019-01-07T16:02:26" name="Sending private smart contract asynchronously" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is successfully mined with valid account" time="1.441"></testcase>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is not mined with non-existed account" time="1.136"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="7" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_event.spec" time="11.587" timestamp="2019-01-07T16:02:26" name="Private smart contract with event" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Private smart contract with event" name="Log events in total are **only** captured in participated parties when executing the contract" time="3.634"></testcase>
		<testcase classname="Private smart contract with event" name="Log events in the state are **only** captured in participated parties when executing the contract" time="7.953"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="8" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_multiple.spec" time="16.346" timestamp="2019-01-07T16:02:26" name="Multiple private smart contracts" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Multiple private smart contracts" name="Contracts are mined" time="16.346"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="9" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_spam.spec" time="8.286" timestamp="2019-01-07T16:02:26" name="Multiple private smart contracts between nodes" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Multiple private smart contracts between nodes" name="Send transactions from one node to others" time="8.286"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="10" tests="4" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/smart_contract_dual_state.spec" time="4.661" timestamp="2019-01-07T16:02:26" name="Dual state implementation when peforming function calls from one smart contract to another" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all public smart contracts: public -&gt; public -&gt; public" time="1.307"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all private smart contracts: private -&gt; private -&gt; private" time="1.312"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a private smart contract to public smart contracts: private -&gt; public -&gt; public" time="1.271"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a public smart contract to private smart contracts: public -&gt; private -&gt; private" time="0.771">
			<failure message="&#34;a4&#34;&#39;s &#34;getc&#34; function execution in &#34;Node1&#34; returns &#34;1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.tx.exceptions.ContractCallException: Empty value (0x) returned from contract&#39;" type="&#34;a4&#34;&#39;s &#34;getc&#34; function execution in &#34;Node1&#34; returns &#34;1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.tx.exceptions.ContractCallException: Empty value (0x) returned from contract&#39;">com.quorum.gauge.services.ContractService.readGenericStoreContractGetValue(ContractService.java:205)&#xA;com.quorum.gauge.SmartContractDualState.verifyStoreContractGetValue(SmartContractDualState.java:103)&#xA;sun.reflect.GeneratedMethodAccessor71.invoke(Unknown Source)&#xA;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.lang.reflect.Method.invoke(Method.java:498)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:45)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:96)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:79)&#xA;java.lang.Thread.run(Thread.java:748)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="11" tests="7" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/estimate_gas.spec" time="3.547" timestamp="2019-01-07T16:02:26" name="Estimate gas required for transactions and contracts" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required for public transaction" time="0.454"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Deploy public smart contract, this is used for estimating the calls (we also need it so we can use the binary data in the estimateGas() acceptance tests below)" time="0.172"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create public smart contract" time="0.146"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a public smart contract" time="0.151"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Deploy private smart contract, this is used for estimating the calls (we also need it so we can use the binary data in the estimateGas() acceptance tests below)" time="2.335"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create private smart contract" time="0.144"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a private smart contract" time="0.145"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="12" tests="3" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_public_raw_smart_contract_single.spec" time="3.905" timestamp="2019-01-07T16:02:26" name="Public raw smart contract when signed externally" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Public raw smart contract when signed externally" name="Contract is deployed and mined" time="1.534"></testcase>
		<testcase classname="Public raw smart contract when signed externally" name="Everyone in the network has the same state for the contract" time="0.391"></testcase>
		<testcase classname="Public raw smart contract when signed externally" name="When there&#39;s an update, every node is updated" time="1.980"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="13" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/transactions_for_block_height.spec" time="4.874" timestamp="2019-01-07T16:02:26" name="Transactions for different block heights" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Transactions for different block heights" name="Private smart contracts for Raft consensus" time="4.874"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="14" tests="5" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_single.spec" time="2.212" timestamp="2019-01-07T16:02:26" name="Single private smart contract" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Single private smart contract" name="Contract is mined" time="0.350"></testcase>
		<testcase classname="Single private smart contract" name="Storage Root storing private smart contracts must be the same" time="0.191"></testcase>
		<testcase classname="Single private smart contract" name="Transaction payload is secured" time="0.704"></testcase>
		<testcase classname="Single private smart contract" name="Privacy is enforced between parties" time="0.438"></testcase>
		<testcase classname="Single private smart contract" name="When there&#39;s an update, privacy is still enforced" time="0.529"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="15" tests="1" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/private_transaction_bloom_section.spec" time="99.429" timestamp="2019-01-07T16:02:26" name="Private smart contract with event in the next bloom bit section" errors="0" hostname="travis-job-699d2823-cb77-4401-9249-597d45d9c23a">
		<properties></properties>
		<testcase classname="Private smart contract with event in the next bloom bit section" name="Log events are **only** captured in participated parties when executing the contract" time="99.429">
			<failure message="Wait for block height is multiple of &#34;4096&#34; by sending arbitrary public transactions&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x464329cd8204552c1423518d0da25a01654dca6b5a3b3e42985ad6cea50e6c40&#39;" type="Wait for block height is multiple of &#34;4096&#34; by sending arbitrary public transactions&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x464329cd8204552c1423518d0da25a01654dca6b5a3b3e42985ad6cea50e6c40&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PublicSmartContract.waitForBlockHeightBySendingPublicTransaction(PublicSmartContract.java:132)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
</testsuites>