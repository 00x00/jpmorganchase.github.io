<testsuites>
	<testsuite id="1" tests="1" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_spam.spec" time="61.253" timestamp="2019-03-26T18:17:48" name="Multiple private smart contracts between nodes" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Multiple private smart contracts between nodes" name="Send transactions from one node to others" time="61.253">
			<failure message="Send &#34;10&#34; simple private smart contracts from a default account in &#34;Node1&#34; and it&#39;s separately private for &#34;Node2,Node3&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xe6ba5f3781094a45458b79bd58a0266ab901617df42f8ee611364c43d089ac90&#39;" type="Send &#34;10&#34; simple private smart contracts from a default account in &#34;Node1&#34; and it&#39;s separately private for &#34;Node2,Node3&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xe6ba5f3781094a45458b79bd58a0266ab901617df42f8ee611364c43d089ac90&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.sendPrivateSmartContracts(PrivateSmartContract.java:347)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="2" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec" time="0.000" timestamp="2019-03-26T18:17:48" name="State manipulation in private smart contract" errors="0" skipped="1" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="State manipulation in private smart contract" name="Private state is maintained" time="0.000">
			<skipped message="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec:27 Step implementation not found =&gt; &#39;Note: this step is not implemented indicating that the spec execution is temporarily skipped&#39;"></skipped>
		</testcase>
		<system-out></system-out>
		<system-err>Validation failed, 1 Scenarios were skipped.</system-err>
	</testsuite>
	<testsuite id="3" tests="1" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/istanbul_fault_tolerance.spec" time="200.404" timestamp="2019-03-26T18:17:48" name="Istanbul fault tolerance and recoverability" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Istanbul fault tolerance and recoverability" name="Modify number of validators from less than 2F + 1 to more than 2F + 1" time="200.404">
			<failure message="The consensus should work at the beginning&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: Timed out! Can&#39;t wait until block height is 66 higher. Last block height was 63&#39;" type="The consensus should work at the beginning&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: Timed out! Can&#39;t wait until block height is 66 higher. Last block height was 63&#39;">com.quorum.gauge.core.AbstractSpecImplementation.lambda$waitForBlockHeight$3(AbstractSpecImplementation.java:109)&#xA;rx.internal.util.ActionObserver.onCompleted(ActionObserver.java:49)&#xA;rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onCompleted(OnSubscribeDoOnEach.java:63)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitLoop(OperatorMerge.java:656)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emit(OperatorMerge.java:568)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onCompleted(OperatorMerge.java:860)&#xA;rx.internal.operators.OnSubscribeTimerOnce$1.call(OnSubscribeTimerOnce.java:54)&#xA;rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2.call(EventLoopsScheduler.java:189)&#xA;rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)&#xA;java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)&#xA;java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#xA;java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="4" tests="5" failures="5" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_single.spec" time="306.078" timestamp="2019-03-26T18:17:48" name="Single private smart contract" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Single private smart contract" name="Contract is mined" time="61.298">
			<failure message="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x4ac46f396b9ad43e9d92b3c14e92f408269dabfc7e49dc6b7dd0349e64b7a1e5&#39;" type="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x4ac46f396b9ad43e9d92b3c14e92f408269dabfc7e49dc6b7dd0349e64b7a1e5&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.setupContract(PrivateSmartContract.java:64)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract" name="Storage Root storing private smart contracts must be the same" time="61.213">
			<failure message="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x6ad9e888cfb84876093ac25ae49aa41da2d7023affa294c0d94e7488d9f30c93&#39;" type="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x6ad9e888cfb84876093ac25ae49aa41da2d7023affa294c0d94e7488d9f30c93&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.setupContract(PrivateSmartContract.java:64)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract" name="Transaction payload is secured" time="61.182">
			<failure message="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x2cc4e1059a4aff52ca80720e4cb4fa0ff976056d151fcac15e6150094096cd09&#39;" type="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x2cc4e1059a4aff52ca80720e4cb4fa0ff976056d151fcac15e6150094096cd09&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.setupContract(PrivateSmartContract.java:64)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract" name="Privacy is enforced between parties" time="61.199">
			<failure message="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xb903a62b172a8b6ee560e5024a79526752d7e5ac9543ab6c39aa834a96cdb64a&#39;" type="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xb903a62b172a8b6ee560e5024a79526752d7e5ac9543ab6c39aa834a96cdb64a&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.setupContract(PrivateSmartContract.java:64)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Single private smart contract" name="When there&#39;s an update, privacy is still enforced" time="61.186">
			<failure message="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xf9c4333103cf1eb39e6f87255922a69193e6052ab499fabc7988a8345666a2b4&#39;" type="Deploy a simple smart contract with initial value &#34;42&#34; in &#34;Node1&#34;&#39;s default account and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xf9c4333103cf1eb39e6f87255922a69193e6052ab499fabc7988a8345666a2b4&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.setupContract(PrivateSmartContract.java:64)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="5" tests="2" failures="2" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_public_transactions.spec" time="0.795" timestamp="2019-03-26T18:17:48" name="Value transfer in public transactions" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Value transfer in public transactions" name="Successful public transaction submission" time="0.382">
			<failure message="Transaction is accepted in the blockchain&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [tx_hash] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Transaction is accepted in the blockchain&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [tx_hash] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.ValueTransferPublicTransaction.verifyTransactionHash(ValueTransferPublicTransaction.java:60)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Value transfer in public transactions" name="Successful signed public transaction submission" time="0.413">
			<failure message="Transaction is accepted in the blockchain&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [tx_hash] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Transaction is accepted in the blockchain&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [tx_hash] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.ValueTransferPublicTransaction.verifyTransactionHash(ValueTransferPublicTransaction.java:60)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="6" tests="3" failures="3" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_public_raw_smart_contract_single.spec" time="62.658" timestamp="2019-03-26T18:17:48" name="Public raw smart contract when signed externally" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Public raw smart contract when signed externally" name="Contract is deployed and mined" time="62.578">
			<failure message="Deploy `SimpleStorage` public smart contract with initial value &#34;32&#34; signed by external wallet &#34;Wallet1&#34; on node &#34;Node2&#34;, name this contract as &#34;contract32&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x20cafeb0a26b7d1f1e6f9303fef722682162b4cb067cc7729c8c31a51215bd4f&#39;" type="Deploy `SimpleStorage` public smart contract with initial value &#34;32&#34; signed by external wallet &#34;Wallet1&#34; on node &#34;Node2&#34;, name this contract as &#34;contract32&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x20cafeb0a26b7d1f1e6f9303fef722682162b4cb067cc7729c8c31a51215bd4f&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PublicRawSmartContract.deployClientReceiptSmartContract(PublicRawSmartContract.java:40)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Public raw smart contract when signed externally" name="Everyone in the network has the same state for the contract" time="0.046">
			<failure message="&#34;contract32&#34;&#39;s `get()` function execution in &#34;Node1&#34; returns &#34;32&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [contract32] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="&#34;contract32&#34;&#39;s `get()` function execution in &#34;Node1&#34; returns &#34;32&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [contract32] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.PrivateSmartContract.verifyPrivacyWithParticipatedNodes(PrivateSmartContract.java:119)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Public raw smart contract when signed externally" name="When there&#39;s an update, every node is updated" time="0.034">
			<failure message="Execute &#34;contract32&#34;&#39;s `set()` function with new value &#34;5&#34; signed by external wallet &#34;Wallet8&#34; in &#34;Node3&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [contract32] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Execute &#34;contract32&#34;&#39;s `set()` function with new value &#34;5&#34; signed by external wallet &#34;Wallet8&#34; in &#34;Node3&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [contract32] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.PublicRawSmartContract.updateNewValue(PublicRawSmartContract.java:48)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="7" tests="4" failures="4" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/smart_contract_dual_state.spec" time="244.633" timestamp="2019-03-26T18:17:48" name="Dual state implementation when peforming function calls from one smart contract to another" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all public smart contracts: public -&gt; public -&gt; public" time="61.157">
			<failure message="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34;, named this contract as &#34;c1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xeba31905a5471893f3a8158f72cc040c373a235fc6d47ce8320552ef4b1f320a&#39;" type="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34;, named this contract as &#34;c1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xeba31905a5471893f3a8158f72cc040c373a235fc6d47ce8320552ef4b1f320a&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.SmartContractDualState.setupStorecAsPublicDependentContract(SmartContractDualState.java:42)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all private smart contracts: private -&gt; private -&gt; private" time="61.155">
			<failure message="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node2&#34;, named this contract as &#34;c2&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x22cd27ab7813a519468b5230759720c4ba3af68875ac577a78da5e356f1e62fc&#39;" type="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node2&#34;, named this contract as &#34;c2&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x22cd27ab7813a519468b5230759720c4ba3af68875ac577a78da5e356f1e62fc&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.SmartContractDualState.setupStorecAsPrivateDependentContract(SmartContractDualState.java:56)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a private smart contract to public smart contracts: private -&gt; public -&gt; public" time="61.154">
			<failure message="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34;, named this contract as &#34;c3&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x7663e8d8b9a873307e1c2f7b574b748f699ad21d95d4a3fe90bc1f43f7e539fb&#39;" type="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34;, named this contract as &#34;c3&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x7663e8d8b9a873307e1c2f7b574b748f699ad21d95d4a3fe90bc1f43f7e539fb&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.SmartContractDualState.setupStorecAsPublicDependentContract(SmartContractDualState.java:42)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a public smart contract to private smart contracts: public -&gt; private -&gt; private" time="61.167">
			<failure message="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node2&#34;, named this contract as &#34;c4&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x5a72d3075059eba8ca21c990110f3b9991b42149b381ff3f3547ee92aa0ffd39&#39;" type="Deploy &#34;storec&#34; smart contract with initial value &#34;1&#34; from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node2&#34;, named this contract as &#34;c4&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x5a72d3075059eba8ca21c990110f3b9991b42149b381ff3f3547ee92aa0ffd39&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.SmartContractDualState.setupStorecAsPrivateDependentContract(SmartContractDualState.java:56)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="8" tests="1" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_multiple.spec" time="61.192" timestamp="2019-03-26T18:17:48" name="Multiple private smart contracts" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Multiple private smart contracts" name="Contracts are mined" time="61.192">
			<failure message="Deploy &#34;10&#34; private smart contracts between a default account in &#34;Node1&#34; and a default account in &#34;Node2&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xf9711576fbe009ae9a5a5a7b2c0a0d2dcca06ba2dd20b19eb3282edb5496e4ba&#39;" type="Deploy &#34;10&#34; private smart contracts between a default account in &#34;Node1&#34; and a default account in &#34;Node2&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0xf9711576fbe009ae9a5a5a7b2c0a0d2dcca06ba2dd20b19eb3282edb5496e4ba&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.createMultiple(PrivateSmartContract.java:148)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="9" tests="1" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/public_smart_contract_event.spec" time="61.234" timestamp="2019-03-26T18:17:48" name="Public smart contract with event" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Public smart contract with event" name="Log events in total are captured when executing the contract" time="61.234">
			<failure message="Deploy `ClientReceipt` smart contract from a default account in &#34;Node1&#34;, named this contract as &#34;contract12&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x29615aa16f3db6b6ef71c19c25de389cdec46f0b08a62e1294f9c39137ed6ee3&#39;" type="Deploy `ClientReceipt` smart contract from a default account in &#34;Node1&#34;, named this contract as &#34;contract12&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x29615aa16f3db6b6ef71c19c25de389cdec46f0b08a62e1294f9c39137ed6ee3&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PublicSmartContract.deployClientReceiptSmartContract(PublicSmartContract.java:51)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="10" tests="2" failures="2" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/transactions_for_block_height.spec" time="443.089" timestamp="2019-03-26T18:17:48" name="Transactions for different block heights" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Transactions for different block heights" name="Private smart contracts for Istanbul consensus" time="221.529">
			<failure message="Wait until block height is atleast &lt;n&gt; higher than &lt;snapshotName&gt;&#xA;Concept Execution Failure: &#39;java.lang.RuntimeException: Timed out! Can&#39;t wait until block height is 73 higher. Last block height was 63&#39;" type="Wait until block height is atleast &lt;n&gt; higher than &lt;snapshotName&gt;&#xA;Concept Execution Failure: &#39;java.lang.RuntimeException: Timed out! Can&#39;t wait until block height is 73 higher. Last block height was 63&#39;">com.quorum.gauge.core.AbstractSpecImplementation.lambda$waitForBlockHeight$3(AbstractSpecImplementation.java:109)&#xA;rx.internal.util.ActionObserver.onCompleted(ActionObserver.java:49)&#xA;rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onCompleted(OnSubscribeDoOnEach.java:63)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitLoop(OperatorMerge.java:656)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emit(OperatorMerge.java:568)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onCompleted(OperatorMerge.java:860)&#xA;rx.internal.operators.OnSubscribeTimerOnce$1.call(OnSubscribeTimerOnce.java:54)&#xA;rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2.call(EventLoopsScheduler.java:189)&#xA;rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)&#xA;java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)&#xA;java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#xA;java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Transactions for different block heights" name="Public smart contracts for Istanbul consensus" time="221.560">
			<failure message="Wait until block height is atleast &lt;n&gt; higher than &lt;snapshotName&gt;&#xA;Concept Execution Failure: &#39;java.lang.RuntimeException: Timed out! Can&#39;t wait until block height is 73 higher. Last block height was 63&#39;" type="Wait until block height is atleast &lt;n&gt; higher than &lt;snapshotName&gt;&#xA;Concept Execution Failure: &#39;java.lang.RuntimeException: Timed out! Can&#39;t wait until block height is 73 higher. Last block height was 63&#39;">com.quorum.gauge.core.AbstractSpecImplementation.lambda$waitForBlockHeight$3(AbstractSpecImplementation.java:109)&#xA;rx.internal.util.ActionObserver.onCompleted(ActionObserver.java:49)&#xA;rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onCompleted(OnSubscribeDoOnEach.java:63)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitLoop(OperatorMerge.java:656)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emit(OperatorMerge.java:568)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onCompleted(OperatorMerge.java:860)&#xA;rx.internal.operators.OnSubscribeTimerOnce$1.call(OnSubscribeTimerOnce.java:54)&#xA;rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2.call(EventLoopsScheduler.java:189)&#xA;rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)&#xA;java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)&#xA;java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#xA;java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="11" tests="2" failures="1" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_async.spec" time="60.161" timestamp="2019-03-26T18:17:48" name="Sending private smart contract asynchronously" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is successfully mined with valid account" time="59.026">
			<failure message="Transaction Receipt is present in &#34;Node1&#34; for &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: retry timed out&#39;" type="Transaction Receipt is present in &#34;Node1&#34; for &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: retry timed out&#39;">com.quorum.gauge.common.RetryWithDelay.lambda$call$0(RetryWithDelay.java:52)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:69)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77)&#xA;rx.internal.operators.OnSubscribeRedo$3$1.onNext(OnSubscribeRedo.java:302)&#xA;rx.internal.operators.OnSubscribeRedo$3$1.onNext(OnSubscribeRedo.java:284)&#xA;rx.internal.operators.NotificationLite.accept(NotificationLite.java:135)&#xA;rx.subjects.SubjectSubscriptionManager$SubjectObserver.emitNext(SubjectSubscriptionManager.java:253)&#xA;rx.subjects.BehaviorSubject.onNext(BehaviorSubject.java:160)&#xA;rx.observers.SerializedObserver.onNext(SerializedObserver.java:91)&#xA;rx.subjects.SerializedSubject.onNext(SerializedSubject.java:67)&#xA;rx.internal.operators.OnSubscribeRedo$2$1.onError(OnSubscribeRedo.java:237)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onError(OnSubscribeMap.java:88)&#xA;rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:73)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)&#xA;rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)&#xA;rx.Observable.unsafeSubscribe(Observable.java:10327)&#xA;rx.internal.operators.OnSubscribeRedo$2.call(OnSubscribeRedo.java:273)&#xA;rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:73)&#xA;rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:52)&#xA;rx.internal.operators.OnSubscribeRedo$4$1.onNext(OnSubscribeRedo.java:336)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.emitScalar(OperatorMerge.java:395)&#xA;rx.internal.operators.OperatorMerge$MergeSubscriber.tryEmit(OperatorMerge.java:355)&#xA;rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:846)&#xA;rx.internal.operators.OnSubscribeTimerOnce$1.call(OnSubscribeTimerOnce.java:49)&#xA;rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2.call(EventLoopsScheduler.java:189)&#xA;rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)&#xA;java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)&#xA;java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#xA;java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&#xA;java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is not mined with non-existed account" time="1.135"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="12" tests="2" failures="2" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_event.spec" time="122.358" timestamp="2019-03-26T18:17:48" name="Private smart contract with event" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Private smart contract with event" name="Log events in total are **only** captured in participated parties when executing the contract" time="61.167">
			<failure message="Deploy `ClientReceipt` smart contract from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x03a5b099cbe0628b52f758623f3eb2e6d74dc8bb9508046753ac9025f6dad386&#39;" type="Deploy `ClientReceipt` smart contract from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, named this contract as &#34;contract17&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x03a5b099cbe0628b52f758623f3eb2e6d74dc8bb9508046753ac9025f6dad386&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.deployClientReceiptSmartContract(PrivateSmartContract.java:284)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private smart contract with event" name="Log events in the state are **only** captured in participated parties when executing the contract" time="61.191">
			<failure message="Deploy `ClientReceipt` smart contract from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node2&#34;, named this contract as &#34;contract12&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x8ce251ab10c4790a6de1ad0b0ccb81dcb3686610e92898074198f5604edcc60f&#39;" type="Deploy `ClientReceipt` smart contract from a default account in &#34;Node1&#34; and it&#39;s private for &#34;Node2&#34;, named this contract as &#34;contract12&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x8ce251ab10c4790a6de1ad0b0ccb81dcb3686610e92898074198f5604edcc60f&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateSmartContract.deployClientReceiptSmartContract(PrivateSmartContract.java:284)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="13" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_private_transactions.spec" time="0.438" timestamp="2019-03-26T18:17:48" name="Value transfer in private transactions" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful private transaction submission" time="0.231"></testcase>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful signed private transaction submission" time="0.207"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="14" tests="7" failures="6" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/estimate_gas.spec" time="123.102" timestamp="2019-03-26T18:17:48" name="Estimate gas required for transactions and contracts" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required for public transaction" time="0.573"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Deploy public smart contract, this is used for estimating the calls (we also need it so we can use the binary data in the estimateGas() acceptance tests below)" time="61.190">
			<failure message="Deploy `SimpleContract` public smart contract from a default account in &#34;Node1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x7aee020168dec1c384a69393f6744336183b214497e72a894c835aefe7c42d6c&#39;" type="Deploy `SimpleContract` public smart contract from a default account in &#34;Node1&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x7aee020168dec1c384a69393f6744336183b214497e72a894c835aefe7c42d6c&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.EstimateGas.createContract(EstimateGas.java:51)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create public smart contract" time="0.044">
			<failure message="Estimate gas for deploying `SimpleContract` public smart contract from a default account in &#34;Node1&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [publicContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Estimate gas for deploying `SimpleContract` public smart contract from a default account in &#34;Node1&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [publicContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.EstimateGas.estimatePublicContract(EstimateGas.java:58)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a public smart contract" time="0.035">
			<failure message="Estimate gas for calling the `SimpleContract` public smart contract from a default account in &#34;Node1&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [publicContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Estimate gas for calling the `SimpleContract` public smart contract from a default account in &#34;Node1&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [publicContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.EstimateGas.estimatePublicContractCall(EstimateGas.java:67)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Deploy private smart contract, this is used for estimating the calls (we also need it so we can use the binary data in the estimateGas() acceptance tests below)" time="61.174">
			<failure message="Deploy `SimpleContract` private smart contract from a default account in &#34;Node1&#34; and private for &#34;Node4&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x0a423839ecbb86d0f1f7445ab6cb8eb362dcf35ebddb9507929aed38071de47c&#39;" type="Deploy `SimpleContract` private smart contract from a default account in &#34;Node1&#34; and private for &#34;Node4&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x0a423839ecbb86d0f1f7445ab6cb8eb362dcf35ebddb9507929aed38071de47c&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.EstimateGas.createPrivateContract(EstimateGas.java:77)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create private smart contract" time="0.051">
			<failure message="Estimate gas for deploying `SimpleContract` private smart contract from a default account in &#34;Node1&#34; and private for &#34;Node4&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [privateContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Estimate gas for deploying `SimpleContract` private smart contract from a default account in &#34;Node1&#34; and private for &#34;Node4&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [privateContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.EstimateGas.estimatePrivateContract(EstimateGas.java:84)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a private smart contract" time="0.035">
			<failure message="Estimate gas for calling the `SimpleContract` private smart contract from a default account in &#34;Node1&#34; and private for &#34;Node4&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [privateContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;" type="Estimate gas for calling the `SimpleContract` private smart contract from a default account in &#34;Node1&#34; and private for &#34;Node4&#34;&#xA;Step Execution Failure: &#39;java.lang.AssertionError: [Value class for key [privateContract1] in Gauge DataStore] &#xA;Expecting actual not to be null&#39;">com.quorum.gauge.core.AbstractSpecImplementation.mustHaveValue(AbstractSpecImplementation.java:83)&#xA;com.quorum.gauge.EstimateGas.estimatePrivateContractCall(EstimateGas.java:93)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="15" tests="5" failures="5" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_private_raw_smart_contract_single.spec" time="315.050" timestamp="2019-03-26T18:17:48" name="Private raw smart contract when signed externally" errors="0" hostname="travis-job-bd16190f-359e-4538-ad5c-49f4878360c1">
		<properties></properties>
		<testcase classname="Private raw smart contract when signed externally" name="Contract is mined" time="63.668">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x07f8a41360082ec2702b90b541344b9f9b75ad7db300c94deb1600d5a8bdcdeb&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x07f8a41360082ec2702b90b541344b9f9b75ad7db300c94deb1600d5a8bdcdeb&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Storage Root storing private smart contracts must be the same" time="62.820">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x1ef6091130742c2e36be8a344ee5ef149e43e87afdbf254faef7c57ba8a784d4&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x1ef6091130742c2e36be8a344ee5ef149e43e87afdbf254faef7c57ba8a784d4&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Transaction payload is secured" time="62.826">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x40372b7171595127bba4bcf760edc4d06c350f212ed24d2d1c816c7d964fdfb5&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x40372b7171595127bba4bcf760edc4d06c350f212ed24d2d1c816c7d964fdfb5&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Privacy is enforced between parties" time="62.859">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x3eb04229822f9ea510f0ab666393d0affd5de343ae5d11e77dee5dc7d18a6d64&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x3eb04229822f9ea510f0ab666393d0affd5de343ae5d11e77dee5dc7d18a6d64&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="When there&#39;s an update, privacy is still enforced" time="62.877">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x7dcab2fddaa3347926e7e0ef8093ad7b9f045dc3136591357b5702bc8eb55bf0&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.protocol.exceptions.TransactionException: Transaction receipt was not generated after 60 seconds for transaction: 0x7dcab2fddaa3347926e7e0ef8093ad7b9f045dc3136591357b5702bc8eb55bf0&#39;">rx.exceptions.Exceptions.propagate(Exceptions.java:57)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:83)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:124)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:106)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
</testsuites>