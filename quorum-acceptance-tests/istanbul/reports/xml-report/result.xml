<testsuites>
	<testsuite id="1" tests="7" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/estimate_gas.spec" time="5.975" timestamp="2019-02-25T16:36:12" name="Estimate gas required for transactions and contracts" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required for public transaction" time="0.563"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Deploy public smart contract, this is used for estimating the calls (we also need it so we can use the binary data in the estimateGas() acceptance tests below)" time="2.217"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create public smart contract" time="0.184"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a public smart contract" time="0.207"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Deploy private smart contract, this is used for estimating the calls (we also need it so we can use the binary data in the estimateGas() acceptance tests below)" time="2.483"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to create private smart contract" time="0.159"></testcase>
		<testcase classname="Estimate gas required for transactions and contracts" name="Estimate gas required to call a private smart contract" time="0.162"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="2" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/istanbul_fault_tolerance.spec" time="13.592" timestamp="2019-02-25T16:36:12" name="Istanbul fault tolerance and recoverability" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Istanbul fault tolerance and recoverability" name="Modify number of validators from less than 2F + 1 to more than 2F + 1" time="13.592"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="3" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_multiple.spec" time="8.012" timestamp="2019-02-25T16:36:12" name="Multiple private smart contracts" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Multiple private smart contracts" name="Contracts are mined" time="8.012"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="4" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_private_transactions.spec" time="0.547" timestamp="2019-02-25T16:36:12" name="Value transfer in private transactions" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful private transaction submission" time="0.236"></testcase>
		<testcase classname="Value transfer in private transactions" name="Unsuccessful signed private transaction submission" time="0.311"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="5" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/02_advanced/transactions_for_block_height.spec" time="308.170" timestamp="2019-02-25T16:36:12" name="Transactions for different block heights" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Transactions for different block heights" name="Private smart contracts for Istanbul consensus" time="153.039"></testcase>
		<testcase classname="Transactions for different block heights" name="Public smart contracts for Istanbul consensus" time="155.131"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="6" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_event.spec" time="15.343" timestamp="2019-02-25T16:36:12" name="Private smart contract with event" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Private smart contract with event" name="Log events in total are **only** captured in participated parties when executing the contract" time="5.427"></testcase>
		<testcase classname="Private smart contract with event" name="Log events in the state are **only** captured in participated parties when executing the contract" time="9.916"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="7" tests="5" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_single.spec" time="14.229" timestamp="2019-02-25T16:36:12" name="Single private smart contract" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Single private smart contract" name="Contract is mined" time="2.396"></testcase>
		<testcase classname="Single private smart contract" name="Storage Root storing private smart contracts must be the same" time="2.245"></testcase>
		<testcase classname="Single private smart contract" name="Transaction payload is secured" time="2.520"></testcase>
		<testcase classname="Single private smart contract" name="Privacy is enforced between parties" time="2.463"></testcase>
		<testcase classname="Single private smart contract" name="When there&#39;s an update, privacy is still enforced" time="4.605"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="8" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/public_smart_contract_event.spec" time="5.051" timestamp="2019-02-25T16:36:12" name="Public smart contract with event" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Public smart contract with event" name="Log events in total are captured when executing the contract" time="5.051"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="9" tests="5" failures="5" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_private_raw_smart_contract_single.spec" time="8.476" timestamp="2019-02-25T16:36:12" name="Private raw smart contract when signed externally" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Private raw smart contract when signed externally" name="Contract is mined" time="1.956">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Storage Root storing private smart contracts must be the same" time="1.827">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Transaction payload is secured" time="1.555">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="Privacy is enforced between parties" time="1.600">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<testcase classname="Private raw smart contract when signed externally" name="When there&#39;s an update, privacy is still enforced" time="1.538">
			<failure message="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;" type="Deploy a simple smart contract with initial value &#34;23&#34; signed by external wallet &#34;Wallet1&#34; in &#34;Node1&#34; and it&#39;s private for &#34;Node4&#34;, name this contract as &#34;contract31&#34;&#xA;Step Execution Failure: &#39;java.lang.RuntimeException: org.web3j.quorum.enclave.EnclaveClientConnectionException: Invalid response received from enclave: 500 No EntityManager with actual transaction available for current thread - cannot reliably process &#39;persist&#39; call&#39;">org.web3j.tx.Contract.deploy(Contract.java:375)&#xA;org.web3j.tx.Contract.lambda$deployRemoteCall$6(Contract.java:404)&#xA;org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:30)&#xA;org.web3j.protocol.core.RemoteCall.lambda$observable$0(RemoteCall.java:51)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)&#xA;rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)&#xA;rx.Observable.subscribe(Observable.java:10423)&#xA;rx.Observable.subscribe(Observable.java:10390)&#xA;rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)&#xA;rx.observables.BlockingObservable.first(BlockingObservable.java:166)&#xA;com.quorum.gauge.PrivateRawSmartContract.setupContract(PrivateRawSmartContract.java:43)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#xA;java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;java.base/java.lang.reflect.Method.invoke(Method.java:566)&#xA;com.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)&#xA;com.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)&#xA;com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)&#xA;com.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)&#xA;com.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)&#xA;com.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)&#xA;com.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)&#xA;com.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)&#xA;com.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)&#xA;java.base/java.lang.Thread.run(Thread.java:834)&#xA;</failure>
		</testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="10" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_async.spec" time="38.970" timestamp="2019-02-25T16:36:12" name="Sending private smart contract asynchronously" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is successfully mined with valid account" time="37.892"></testcase>
		<testcase classname="Sending private smart contract asynchronously" name="Contract is not mined with non-existed account" time="1.078"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="11" tests="4" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/smart_contract_dual_state.spec" time="54.086" timestamp="2019-02-25T16:36:12" name="Dual state implementation when peforming function calls from one smart contract to another" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all public smart contracts: public -&gt; public -&gt; public" time="13.525"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls between all private smart contracts: private -&gt; private -&gt; private" time="13.534"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a private smart contract to public smart contracts: private -&gt; public -&gt; public" time="13.522"></testcase>
		<testcase classname="Dual state implementation when peforming function calls from one smart contract to another" name="Function calls from a public smart contract to private smart contracts: public -&gt; private -&gt; private" time="13.505"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="12" tests="2" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/value_transfer_public_transactions.spec" time="5.072" timestamp="2019-02-25T16:36:12" name="Value transfer in public transactions" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Value transfer in public transactions" name="Successful public transaction submission" time="2.433"></testcase>
		<testcase classname="Value transfer in public transactions" name="Successful signed public transaction submission" time="2.639"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="13" tests="3" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/externally_signed_public_raw_smart_contract_single.spec" time="7.931" timestamp="2019-02-25T16:36:12" name="Public raw smart contract when signed externally" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Public raw smart contract when signed externally" name="Contract is deployed and mined" time="3.653"></testcase>
		<testcase classname="Public raw smart contract when signed externally" name="Everyone in the network has the same state for the contract" time="0.405"></testcase>
		<testcase classname="Public raw smart contract when signed externally" name="When there&#39;s an update, every node is updated" time="3.873"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="14" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_spam.spec" time="8.204" timestamp="2019-02-25T16:36:12" name="Multiple private smart contracts between nodes" errors="0" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="Multiple private smart contracts between nodes" name="Send transactions from one node to others" time="8.204"></testcase>
		<system-out></system-out>
		<system-err></system-err>
	</testsuite>
	<testsuite id="15" tests="1" failures="0" package="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec" time="0.000" timestamp="2019-02-25T16:36:12" name="State manipulation in private smart contract" errors="0" skipped="1" hostname="travis-job-b6dc4f68-9b08-4d41-8bb5-a68b32f9c154">
		<properties></properties>
		<testcase classname="State manipulation in private smart contract" name="Private state is maintained" time="0.000">
			<skipped message="/home/travis/build/jpmorganchase/quorum-acceptance-tests/src/specs/01_basic/private_smart_contract_state_manipulation.spec:27 Step implementation not found =&gt; &#39;Note: this step is not implemented indicating that the spec execution is temporarily skipped&#39;"></skipped>
		</testcase>
		<system-out></system-out>
		<system-err>Validation failed, 1 Scenarios were skipped.</system-err>
	</testsuite>
</testsuites>